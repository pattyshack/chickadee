%token<Value> INTEGER_LITERAL FLOAT_LITERAL STRING_LITERAL
%token<Value> IDENTIFIER

%token<Value> LPAREN RPAREN LBRACE RBRACE COMMA COLON AT PERCENT EQUAL

%token<Value> DEFINE
%token<Value> FUNC

// NOTE: we'll parse each line individually, then fold statements/rbrace into
// appropriate definitions.
%start line

line<Line> ->
  = definition |
  = rbrace |
  = local_label |
  = operation_instruction |
  = control_flow_instruction


// NOTE: for simplicity, a function must always return a type (XXX: maybe
// support unit struct)
definition<Line> ->
  func: DEFINE FUNC global_label LPAREN parameters RPAREN type LBRACE

rbrace<Line> -> RBRACE

//
// Labels, variables, and immediate
//

global_label<GlobalLabelReference> -> AT identifier

local_label<LocalLabel> -> COLON identifier

variable_reference<VariableReference> -> PERCENT identifier

identifier<Value> ->
  = IDENTIFIER |
  string: STRING_LITERAL

immediate<OpValue> ->
  = int_immediate |
  = float_immediate

int_immediate<OpValue> -> INTEGER_LITERAL

float_immediate<OpValue> -> FLOAT_LITERAL

typed_variable_definition<VariableDefinition> -> variable_reference type

variable_definition<VariableDefinition> ->
  = typed_variable_definition |
  inferred: variable_reference

value<OpValue> ->
  = variable_reference |
  = global_label |
  = immediate

//
// Lists
//

parameters<Parameters> ->
  = proper_parameters |
  improper: proper_parameters COMMA |
  nil:

proper_parameters<Parameters> ->
  add: proper_parameters COMMA typed_variable_definition |
  new: typed_variable_definition

arguments<Arguments> ->
  = proper_arguments |
  improper: proper_arguments COMMA |
  nil:

proper_arguments<Arguments> ->
  add: proper_arguments COMMA value |
  new: value

types<Types> ->
  = proper_types |
  improper: proper_types COMMA |
  nil:

proper_types<Types> ->
  add: proper_types COMMA type |
  new: type

//
// operationFunction statements
//

operation_instruction<Instruction> ->
  assign: variable_definition EQUAL value |
  unary: variable_definition EQUAL IDENTIFIER value |
  binary: variable_definition EQUAL IDENTIFIER value COMMA value |
  call: variable_definition EQUAL IDENTIFIER value LPAREN arguments RPAREN

control_flow_instruction<Instruction> ->
  unconditional: IDENTIFIER local_label |
  conditional: IDENTIFIER local_label COMMA value COMMA value |
  terminal: IDENTIFIER value

//
// Type
//

// TODO
type<Type> ->
  = number_type |
  = func_type

number_type<Type> -> IDENTIFIER

func_type<Type> -> FUNC LPAREN types RPAREN type

%%lang_specs{
go:
  package: lr
  value_types:
    Value: "*TokenValue"
    Count: "*TokenCount"
    Types: "[]github.com/pattyshack/chickadee/ast.Type"
    Type: "github.com/pattyshack/chickadee/ast.Type"
    Line: "github.com/pattyshack/chickadee/ast.Line"
    GlobalLabelReference: "*github.com/pattyshack/chickadee/ast.GlobalLabelReference"
    LocalLabel: "ParsedLocalLabel"
    Instruction: "github.com/pattyshack/chickadee/ast.Instruction"
    Arguments: "[]github.com/pattyshack/chickadee/ast.Value"
    Parameters: "[]*github.com/pattyshack/chickadee/ast.VariableDefinition"
    VariableDefinition: "*github.com/pattyshack/chickadee/ast.VariableDefinition"
    VariableReference: "*github.com/pattyshack/chickadee/ast.VariableReference"
    OpValue: "github.com/pattyshack/chickadee/ast.Value"
}%%

